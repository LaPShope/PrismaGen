// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  email    String  @unique
  name     String?
  password String
  role     Role    @default(Customer)

  Customer Customer?
  Admin    Admin?
  Comment  Comment[]
}

model Customer {
  accountId Bytes @id

  // Payment Payment[]
  Account Account   @relation(fields: [accountId], references: [id])
  Payment Payment[]
  Order   Order[]
}

model Admin {
  accountId Bytes   @id
  Account   Account @relation(fields: [accountId], references: [id])
}

model Laptop {
  id          Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  name        String
  brand       String
  description String

  LaptopDetails LaptopDetails[]
  Comment       Comment[]

  @@index([brand])
}

model LaptopDetails {
  id       Bytes        @id @default(dbgenerated("uuid_generate_v4()"))
  macId    String       @unique
  laptopId Bytes
  price    Decimal      @db.Decimal(10, 2)
  color    Color
  status   LaptopStatus @default(Available)

  Laptop              Laptop                 @relation(fields: [laptopId], references: [id])
  LaptopDetailOnImage LaptopDetailsOnImage[]
}

model Order {
  id         Bytes       @id @default(dbgenerated("uuid_generate_v4()"))
  customerId Bytes
  status     OrderStatus @default(Pending)

  Customer    Customer      @relation(fields: [customerId], references: [accountId])
  OrderDetail OrderDetail[]
  Payment     Payment?

  @@index([customerId])
}

model OrderDetail {
  id       Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  orderId  Bytes
  laptopId Bytes
  amount   Int
  price    Decimal @db.Decimal(10, 2)

  Order Order @relation(fields: [orderId], references: [id])
}

model Payment {
  id              Bytes         @id
  customerId      Bytes
  orderId         Bytes         @unique
  type            PaymentType
  status          PaymentStatus
  paymentMethodId Bytes?

  Order         Order          @relation(fields: [orderId], references: [id])
  Customer      Customer       @relation(fields: [customerId], references: [accountId])
  PaymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id   Bytes       @id @default(dbgenerated("uuid_generate_v4()"))
  data Json //   store essential data(given from third-party-payment) for each payment method
  type PaymentType

  Payment Payment[]
}

model LaptopDetailsOnImage {
  id              String @id @default(dbgenerated("uuid_generate_v4()"))
  laptopDetailsId Bytes?
  imageId         Bytes?

  Image         Image?         @relation(fields: [imageId], references: [id])
  LaptopDetails LaptopDetails? @relation(fields: [laptopDetailsId], references: [id])
}

model Image {
  id       Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  imageUrl String

  LaptopDetailsOnImage LaptopDetailsOnImage[]
}

model Comment {
  id        Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  laptopId  Bytes
  parentId  Bytes?
  accountId Bytes
  body      String

  Laptop   Laptop    @relation(fields: [laptopId], references: [id])
  Comment  Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  Comments Comment[] @relation("CommentToComment")
  Account  Account   @relation(fields: [accountId], references: [id])
}

model Chat {
  id         Bytes    @id @default(dbgenerated("uuid_generate_v4()"))
  senderId   Bytes
  receiverId Bytes
  message    String
  createAt   DateTime @default(now())
}

enum Role {
  Customer
  Admin
}

enum Color {
  Red
  Blue
  Green
  Black
  White
  Silver
  Gold
}

enum PaymentType {
  VNPay
  Momo
  ZaloPay
  CashOnDelivery
}

enum PaymentStatus {
  Pending
  Success
  Failed
}

enum OrderStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

enum LaptopStatus {
  Available
  SoldOut
}
