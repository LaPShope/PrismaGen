// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  email    String  @unique
  name     String?
  password String
  role     Role    @default(Customer)

  Customer Customer?
  Admin    Admin?
  Comment  Comment[]

  Sender   Chat[] @relation("Sender")
  Receiver Chat[] @relation("Receiver")
}

model Customer {
  accountId Bytes @id

  Account Account   @relation(fields: [accountId], references: [id])
  Payment Payment[]
  Order   Order[]
}

model Admin {
  accountId Bytes   @id
  Account   Account @relation(fields: [accountId], references: [id])
}

model LaptopModel {
  id          Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  name        String
  brand       String
  cpu         String
  ram         String
  storage     String
  display     String
  color       Color
  price       Decimal @db.Decimal(10, 2)
  description String

  Comment            Comment[]
  Laptop             Laptop[]
  LaptopModelOnImage LaptopModelOnImage[]

  @@index([brand])
}

model Laptop {
  macId   Bytes        @id
  MFG     DateTime
  modelId Bytes
  status  LaptopStatus @default(Available)

  LaptopModel LaptopModel @relation(fields: [modelId], references: [id])
}

model Order {
  id         Bytes       @id @default(dbgenerated("uuid_generate_v4()"))
  customerId Bytes
  status     OrderStatus @default(Pending)

  OrderDetail OrderDetail[]
  Payment     Payment?

  Customer Customer @relation(fields: [customerId], references: [accountId])

  @@index([customerId])
}

model OrderDetail {
  id       Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  orderId  Bytes
  laptopId Bytes
  amount   Int
  price    Decimal @db.Decimal(10, 2)

  Order Order @relation(fields: [orderId], references: [id])
}

model Payment {
  id              Bytes         @id
  customerId      Bytes
  orderId         Bytes         @unique
  type            PaymentType
  status          PaymentStatus
  paymentMethodId Bytes?

  Order         Order          @relation(fields: [orderId], references: [id])
  Customer      Customer       @relation(fields: [customerId], references: [accountId])
  PaymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id   Bytes       @id @default(dbgenerated("uuid_generate_v4()"))
  data Json //   store essential data(given from third-party-payment) for each payment method
  type PaymentType

  Payment Payment[]
}

model LaptopModelOnImage {
  laptopModelId Bytes // @id
  imageId       Bytes // @id

  LaptopModel LaptopModel @relation(fields: [laptopModelId], references: [id])
  Image       Image       @relation(fields: [imageId], references: [id])

  @@id([laptopModelId, imageId])
}

model Image {
  id       Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  imageUrl String

  LaptopModelOnImage LaptopModelOnImage[]
}

// one reply comment just have only partent comment
// one comment can have many replies
model Comment {
  id            Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  laptopModelId Bytes
  accountId     Bytes
  parentId      Bytes?
  body          String

  LaptopModel LaptopModel @relation(fields: [laptopModelId], references: [id])
  Account     Account     @relation(fields: [accountId], references: [id])
  Parent      Comment?    @relation("Parent", fields: [parentId], references: [id])
  Replies     Comment[]   @relation("Parent")
}

model Chat {
  id         Bytes    @id @default(dbgenerated("uuid_generate_v4()"))
  senderId   Bytes
  receiverId Bytes
  message    String
  createAt   DateTime @default(now())

  Sender   Account @relation("Sender", fields: [senderId], references: [id])
  Receiver Account @relation("Receiver", fields: [receiverId], references: [id])
}

enum Role {
  Customer
  Admin
}

enum Color {
  Red
  Blue
  Green
  Black
  White
  Silver
  Gold
}

enum PaymentType {
  VNPay
  Momo
  ZaloPay
  CashOnDelivery
}

enum PaymentStatus {
  Pending
  Success
  Failed
}

enum OrderStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

enum LaptopStatus {
  Available
  SoldOut
  Maintenance
}
