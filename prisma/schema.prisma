// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  email    String  @unique
  name     String?
  password String
  role     Role    @default(Customer)

  Customer Customer?
  Admin    Admin?
  Comment  Comment[]

  Sender   Chat[] @relation("Sender")
  Receiver Chat[] @relation("Receiver")
}

model Customer {
  accountId Bytes @id

  Account Account   @relation(fields: [accountId], references: [id])
  Payment Payment[]
  Order   Order[]
  Address Address[]
  Cart    Cart[]
}

model Admin {
  accountId Bytes   @id
  Account   Account @relation(fields: [accountId], references: [id])
}

model LaptopModel {
  id          Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  name        String
  brand       String
  cpu         String
  ram         String
  storage     String
  display     String
  color       Color
  description String?

  Comment            Comment[]
  Laptop             Laptop[]
  LaptopModelOnImage LaptopModelOnImage[]
  LaptopModelOnSale  LaptopModelOnSale[]
  LaptopModelPricing LaptopModelPricing[]
  OrderDetail        OrderDetail[]

  @@index([cpu])
  @@index([ram])
  @@index([brand])
  @@index([cpu, ram])
  @@index([cpu, ram, brand])
}

model Laptop {
  macId   Bytes        @id
  MFG     DateTime
  modelId Bytes
  status  LaptopStatus @default(Available)

  LaptopModel LaptopModel @relation(fields: [modelId], references: [id])
  Cart        Cart[]

  @@index([status])
  @@index([modelId])
}

model LaptopModelPricing {
  id            Bytes    @id @default(dbgenerated("uuid_generate_v4()"))
  laptopModelId Bytes
  price         Decimal  @db.Decimal(10, 2)
  startAt       DateTime
  inActive      Boolean  @default(false)

  LaptopModel LaptopModel   @relation(fields: [laptopModelId], references: [id])
  OrderDetail OrderDetail[]

  @@index([price])
  @@index([startAt])
}

model Order {
  id         Bytes       @id @default(dbgenerated("uuid_generate_v4()"))
  customerId Bytes
  status     OrderStatus @default(Pending)
  address    String

  OrderDetail OrderDetail[]
  Payment     Payment?
  Customer    Customer      @relation(fields: [customerId], references: [accountId])

  @@index([customerId])
  @@index([status])
}

model OrderDetail {
  id                   Bytes @id @default(dbgenerated("uuid_generate_v4()")) //(id, orderId, laptopId)
  orderId              Bytes
  laptopModelId        Bytes
  quantity             Int
  laptopModelPricingId Bytes // when the laptop's price changes, the order's price should not change. this filed will be updated after confirm cart and before payment

  Order              Order              @relation(fields: [orderId], references: [id])
  LaptopModel        LaptopModel        @relation(fields: [laptopModelId], references: [id])
  LaptopModelPricing LaptopModelPricing @relation(fields: [laptopModelPricingId], references: [id])

  @@index([orderId])
  @@index([laptopModelId])
  @@index([laptopModelPricingId])
}

model Payment {
  id              Bytes         @id
  customerId      Bytes
  orderId         Bytes         @unique
  type            PaymentType
  status          PaymentStatus
  paymentMethodId Bytes?

  Order         Order          @relation(fields: [orderId], references: [id])
  Customer      Customer       @relation(fields: [customerId], references: [accountId])
  PaymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([customerId])
  @@index([orderId])
  @@index([status])
  @@index([type])
  @@index([paymentMethodId])
}

model PaymentMethod {
  id   Bytes       @id @default(dbgenerated("uuid_generate_v4()"))
  data Json
  type PaymentType

  Payment Payment[]

  @@index([type])
}

model LaptopModelOnImage {
  laptopModelId Bytes
  imageId       Bytes

  LaptopModel LaptopModel @relation(fields: [laptopModelId], references: [id])
  Image       Image       @relation(fields: [imageId], references: [id])

  @@id([laptopModelId, imageId])
}

model Image {
  id       Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  imageUrl String

  LaptopModelOnImage LaptopModelOnImage[]
}

model Comment {
  id            Bytes  @id @default(dbgenerated("uuid_generate_v4()"))
  laptopModelId Bytes
  accountId     Bytes
  parentId      Bytes?
  body          String

  LaptopModel LaptopModel @relation(fields: [laptopModelId], references: [id])
  Account     Account     @relation(fields: [accountId], references: [id])
  Parent      Comment?    @relation("Parent", fields: [parentId], references: [id])
  Replies     Comment[]   @relation("Parent")

  @@index([laptopModelId])
  @@index([accountId])
  @@index([parentId])
}

model Chat {
  id         Bytes    @id @default(dbgenerated("uuid_generate_v4()"))
  senderId   Bytes
  receiverId Bytes
  message    String
  createAt   DateTime @default(now())

  Sender   Account @relation("Sender", fields: [senderId], references: [id])
  Receiver Account @relation("Receiver", fields: [receiverId], references: [id])
}

model LaptopModelOnSale {
  laptopModelId Bytes
  saleId        Bytes

  LaptopModel LaptopModel @relation(fields: [laptopModelId], references: [id])
  Sale        Sale        @relation(fields: [saleId], references: [id])

  @@id([laptopModelId, saleId])
}

model Sale {
  id       Bytes    @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  discount Int
  startAt  DateTime
  endAt    DateTime

  LaptopModelOnSale LaptopModelOnSale[]
}

model Address {
  id         Bytes   @id @default(dbgenerated("uuid_generate_v4()"))
  customerId Bytes
  city       String
  district   String
  ward       String?
  street     String
  phone      String

  Customer Customer @relation(fields: [customerId], references: [accountId])

  @@index([customerId])
}

model Cart {
  id         Bytes @id @default(dbgenerated("uuid_generate_v4()"))
  customerId Bytes
  laptopId   Bytes
  quantity   Int

  Customer Customer @relation(fields: [customerId], references: [accountId])
  Laptop   Laptop   @relation(fields: [laptopId], references: [macId])

  @@index([customerId])
  @@index([laptopId])
}

enum Role {
  Customer
  Admin
}

enum Color {
  Red
  Blue
  Green
  Black
  White
  Silver
  Gold
}

enum PaymentType {
  VNPay
  Momo
  ZaloPay
  CashOnDelivery
}

enum PaymentStatus {
  Pending
  Success
  Failed
}

enum OrderStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

enum LaptopStatus {
  Available
  SoldOut
  Maintenance
}
