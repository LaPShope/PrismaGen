// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  includeRelationFields = false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       Bytes   @id @db.Binary(16)
  email    String  @unique
  name     String?
  password String
  role     Role    @default(Customer)

  Customer Customer?
  Admin    Admin?
  Comment  Comment[]

  Sender   Chat[] @relation("Sender")
  Receiver Chat[] @relation("Receiver")
}

model Customer {
  account_id Bytes @id @db.Binary(16)

  gender    String
  born_date DateTime
  phone     String
  avatar    String?

  Account Account   @relation(fields: [account_id], references: [id])
  Payment Payment[]
  Order   Order[]
  Address Address[]
  Cart    Cart[]
}

model Admin {
  account_id Bytes @id @db.Binary(16)

  Account Account @relation(fields: [account_id], references: [id])
}

model LaptopModel {
  id Bytes @id @db.Binary(16)

  name        String
  brand       String
  cpu         String
  ram         String
  storage     String
  display     String
  color       Color
  price       Decimal @db.Decimal(10, 2)
  description String?

  Comment           Comment[]
  Laptop            Laptop[]
  LaptopOnImage     LaptopOnImage[]
  OrderDetail       OrderDetail[]
  LaptopOnSale      LaptopOnSale[]
  LaptopModelOnCart LaptopOnCart[]

  @@index([cpu])
  @@index([ram])
  @@index([brand])
  @@index([cpu, ram])
  @@index([cpu, ram, brand])
  @@index([cpu, ram, brand, price])
}

model LaptopOnSale {
  laptop_model_id Bytes @db.Binary(16)

  sale_id Bytes @db.Binary(16)

  LaptopModel LaptopModel @relation(fields: [laptop_model_id], references: [id])
  Sale        Sale        @relation(fields: [sale_id], references: [id])

  @@id([laptop_model_id, sale_id])
}

model Sale {
  id Bytes @id @db.Binary(16)

  event_description String?
  start_at          DateTime
  end_at            DateTime
  discount          Float

  LaptopModelOnSale LaptopOnSale[]
}

model Laptop {
  mac_id Bytes @id @db.Binary(16)

  MFG      DateTime
  model_id Bytes    @db.Binary(16)

  status LaptopStatus @default(Available)

  LaptopModel LaptopModel @relation(fields: [model_id], references: [id])

  @@index([status])
  @@index([model_id])
}

model Order {
  id Bytes @id @db.Binary(16)

  customer_id Bytes @db.Binary(16)

  status      OrderStatus @default(Pending)
  address     String
  date_create DateTime    @default(now())

  OrderDetail OrderDetail[]
  Payment     Payment?
  Customer    Customer      @relation(fields: [customer_id], references: [account_id])

  @@index([customer_id])
  @@index([status])
}

model OrderDetail {
  id              Bytes   @id @db.Binary(16)
  order_id        Bytes   @db.Binary(16)
  laptop_model_id Bytes   @db.Binary(16)
  quantity        Int
  price           Decimal @db.Decimal(10, 2)

  Order       Order       @relation(fields: [order_id], references: [id])
  LaptopModel LaptopModel @relation(fields: [laptop_model_id], references: [id])

  @@index([order_id])
  @@index([laptop_model_id])
}

model Payment {
  id Bytes @id @db.Binary(16)

  customer_id Bytes @db.Binary(16)

  order_id Bytes @unique @db.Binary(16)

  type              PaymentType
  status            PaymentStatus
  payment_method_id Bytes?        @db.Binary(16)

  Order         Order          @relation(fields: [order_id], references: [id])
  Customer      Customer       @relation(fields: [customer_id], references: [account_id])
  PaymentMethod PaymentMethod? @relation(fields: [payment_method_id], references: [id])

  @@index([customer_id])
  @@index([order_id])
  @@index([status])
  @@index([type])
  @@index([payment_method_id])
}

model PaymentMethod {
  id Bytes @id @db.Binary(16)

  data Json
  type PaymentType

  Payment Payment[]

  @@index([type])
}

model LaptopOnImage {
  laptop_model_id Bytes @db.Binary(16)

  image_id Bytes @db.Binary(16)

  LaptopModel LaptopModel @relation(fields: [laptop_model_id], references: [id])
  Image       Image       @relation(fields: [image_id], references: [id])

  @@id([laptop_model_id, image_id])
}

model Image {
  id Bytes @id @db.Binary(16)

  image_url String

  LaptopModelOnImage LaptopOnImage[]
}

model Comment {
  id Bytes @id @db.Binary(16)

  laptop_model_id Bytes @db.Binary(16)

  account_id Bytes @db.Binary(16)

  parent_id Bytes? @db.Binary(16)

  body String

  LaptopModel LaptopModel @relation(fields: [laptop_model_id], references: [id])
  Account     Account     @relation(fields: [account_id], references: [id])
  Parent      Comment?    @relation("Parent", fields: [parent_id], references: [id])
  Replies     Comment[]   @relation("Parent")

  @@index([laptop_model_id])
  @@index([account_id])
  @@index([parent_id])
}

model Chat {
  id Bytes @id @db.Binary(16)

  sender_id Bytes @db.Binary(16)

  receiver_id Bytes @db.Binary(16)

  message   String
  create_at DateTime @default(now())

  Sender   Account @relation("Sender", fields: [sender_id], references: [id])
  Receiver Account @relation("Receiver", fields: [receiver_id], references: [id])
}

model Address {
  id Bytes @id @db.Binary(16)

  customer_id Bytes @db.Binary(16)

  city     String
  district String
  ward     String?
  street   String
  phone    String

  Customer Customer @relation(fields: [customer_id], references: [account_id])

  @@index([customer_id])
}

model Cart {
  id Bytes @id @db.Binary(16)

  customer_id Bytes @db.Binary(16)

  quantity Int

  Customer          Customer       @relation(fields: [customer_id], references: [account_id])
  LaptopModelOnCart LaptopOnCart[]

  @@index([customer_id])
}

model LaptopOnCart {
  cart_id Bytes @db.Binary(16)

  laptop_model_id Bytes @db.Binary(16)

  quantity Int

  Cart        Cart        @relation(fields: [cart_id], references: [id])
  LaptopModel LaptopModel @relation(fields: [laptop_model_id], references: [id])

  @@id([cart_id, laptop_model_id])
}

enum Role {
  Customer
  Admin
}

enum Color {
  Red
  Blue
  Green
  Black
  White
  Silver
  Gold
}

enum PaymentType {
  VNPay
  Momo
  ZaloPay
  CashOnDelivery
}

enum PaymentStatus {
  Pending
  Success
  Failed
}

enum OrderStatus {
  Pending
  Shipped
  Delivered
  Cancelled
}

enum LaptopStatus {
  Available
  SoldOut
  Maintenance
}
